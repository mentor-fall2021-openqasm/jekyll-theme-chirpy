[ { "title": "Progress report - December 09: Checkpoint #3", "url": "/posts/checkpoint3/", "categories": "Updates, Checkpoint", "tags": "updates, checkpoint", "date": "2021-12-09 16:41:55 +0000", "snippet": "Checkpoint Presentation for December 09 Checkpoint #3" }, { "title": "Progress report - November 11: Checkpoint #2", "url": "/posts/checkpoint-2/", "categories": "Updates, Checkpoint", "tags": "updates, checkpoint", "date": "2021-11-07 16:41:55 +0000", "snippet": "Summary since October 7 Checkpoint #1Progress SummaryThe version 1 of the implementation showcased on October 7 - Checkpoint #1 now has several fixes and changes with regards to the translator functionality with conformance to the OpenQASM 3.0 specification. Here are a few changes summarized on the v1 implementation: Type system flaws identified and fixed in conformance to specification Implementations for quantum and classical registers now robust in aliasing. Initial implementation of ‘duration’ as per specification Cleanup and reconciling minor changes that further strengthen stricter conformance to implementation according to specification. Contribution Summary: PR #295 : Suggestion to add Scope for power operator for complex types in language specification. Discussions taken up at TSC meeting. Discussions of requirement of dot notation of complex numbers for few rare use case implementations. Issue #296 : Following discussion with @taalexander at IEEE Quantum Week on OpenPulse grammar implementation and Jacks further discussions, team is now added to the openpulse closed group for discussion with guidance from people and teams working on OpenPulse. PR #269 : PR merged this month. Team contributed to bug and implementation fixes for merged reference AST implementation. Issue #304 : Bug report for openqasm3 pyPI package. Presented progress and project overview at Qiskit advocate session at IEEE Quantum Week 2021. Goals and further direction: Reconstruct and restart current repository to depend on openqasm package rather than forks of openqasm repository and outsource package dependencies for openasm parser, ast and other components Work in support of PR #295 and fulfillment of Issue #296. Take inspirations from discussions in Issue #296 and start writing to invent own grammar and connect it to openpulse, eventually towards an implementation for translating to qiskit-pulse/ qiskit-pulse builder syntax. Take opinions and hints from openpulse invested parties in the discussion in Issue #296 while creating it along. Have received guidance support from openpulse closed groupCheckpoint #2 Document " }, { "title": "Changelog as of October 29, 2021", "url": "/posts/changelog4/", "categories": "Updates, Changelogs", "tags": "updates, progress", "date": "2021-11-02 16:41:55 +0000", "snippet": "Week Highlights Updates on PR #295: Discussions taken up at TSC Meeting session on Abeers comments and questions. Discussion with Tom Alexander for an Openpulse grammar implementation. PR #296 opened up. Jacks meeting and discussion with Presentation at IEEE Quantum Week Qiskit Advocate session Last week’s TODO list achieved: BaseBitArray: List[Optional[bool]] ——–&amp;gt; Optional[str] - pushed to repo BaseBitArray.value returns int - pushed to repo BaseBitArray bitwise operations implementation (including rotr, rotl, popcount )- pushed to repo Logical and comparison operations (&amp;amp;&amp;amp;, ||, ==, !=, etc) overloading - pushed to repo Duration: Casting to ‘machine-precision’ float (tentative: just use python float) - pushed to repo - pushed to repo Summary of Abeers Chat with Jake Lishman: The ComplexNumber : RealNumber PlusMinus ImagNumber is a lexer rule, not a parser rule as it starts with a capital letter (didn’t know this earlier). Adding a separate rule to parse complex numbers differently (let’s say it is complexExpression) might create problems with the parsing as there will be a conflict with additiveExpression and complexExpression , and that doesn’t seem like a right choice to have. Parsing complex numbers as additiveExpression has an advantage as it can parse things like 2*3.0 + sin(pi/2)imag successfully, which is a valid thing according to spec, but will be difficult to implement with complexExpression type parsing rule. Literals for complex numbers ar- e probably not allowed as there has been no discussion about it anywhere. Example (3+4im) * (1+2im) is an invalid statement (with or without type-casting) because complex[.] type doesn’t support literals and implicit typing/casting, and we have to explicitly write the below code: Added to openpulse group on qiskit slack for further discussions and assistance on PR #296. Abeers questions on PR #295 to be raised by Jack in the TSC Meeting.complex[float[32]] a = 3+4im;complex[float[32]] b = 1+2im;complex[float[32]] c = a * b; // validcomplex[float[32]] d = a + (5+6im); // invalidcomplex[float[32]] e = a + complex[float[32]](5+6im); // invalidSome more discussion: https://github.com/Qiskit/openqasm/pull/175Meeting Notes BitArray.py file modified by Abeer, added types. Updates to BitArray.py discussed Discussion about bugs in AST (eg dd.qasm) Duration type flawed OpenPulse grammar: decision to go with custom grammar TODO List: BaseBitArray: List[Optional[bool]] ——–&amp;gt; Optional[str] BaseBitArray.value returns int BaseBitArray bitwise operations implementation (including rotr, rotl, popcount) Fix operations between Angle and other ClassicialTypes Logical and comparison operations (&amp;amp;&amp;amp;, ||, ==, !=, etc) overloading Duration: Casting to ‘machine-precision’ float (tentative: just use python float) Stretch: Not decided yet (Not Implemented) Discussion on #295 Discussion on Abeers comment and questions on the power operator in particular with regard to raising complex numbers to complex powers. Goals set for next week: Update public website Document formation for November 11 review. Sync up meet on Monday next.Major checkpoints and directions for the project: Clean up and reconcile small changes made by Abeer and Adrien in the repo Restart repository based on importing the finished AST package Work in support of PR #295 and PR #296 Investigate possibility of fulfilling PR #296 in implementing openpulse grammar" }, { "title": "Changelog as of October 15, 2021", "url": "/posts/changelog3/", "categories": "Updates, Changelogs", "tags": "updates, progress", "date": "2021-10-15 16:41:55 +0100", "snippet": "Week Highlights Mentorship checkpoint 1 done! Added bitarray implementation and testing Updated structure as per new ast changes Updates in ast: Refactored qasm_parset, removed - redundant files updated IOKeyword and TimeUnit node in ast.py. Fixed merge conflicts and reformatted Updated desginator parameter to size - jakelishman Update notes source/openqasm/src/openqasm/translator/context.py- Bug fixes according to the new changes in LiChens ast commits source/openqasm/src/openqasm/translator/translator.py - Bug fixes according to the new changes in LiChens ast commits Removed unused imports source/openqasm/src/openqasm/translator/bitarray.py - Initial implementation for bitarray types Fixed issue in RegisterView.getitem Added implementation for BaseBitArray.getitem Added additional ClassicalType as per specification by @mbhealy Added initial code for duration type + bug fixes Refactored implementation and changed List[Optional[bool]] -&amp;gt; Optional[str] Implemented bitwise operations in BitArray Added logical operators support source/openqasm/src/openqasm/translator/tests/test_bitarray.py - Added test file for bitarray type testing source/openqasm/src/openqasm/translator/test.py - Updated test.py to newer BitArrayType declaration syntax source/openqasm/src/openqasm/translator/identifiers.py - Removed redundant get_register source/openqasm/src/openqasm/translator/types.py - Updated code with simplifications Bug fixes according to the new changes in LiChens ast commits Meeting notes Openpulse backend support access if needed - Junye Cleanup minor details for implementation for the current progress. Charge forward to defcal! Seeking guidance if anyone has written openpulse grammars. Pluggable grammars: need to decide on which grammar to select and checkout if anyone has a sample grammer set. Look into implement physical qubit syntax and part of duration syntax. Openended questions may mean the grammar isnt even complete https://qiskit.github.io/openqasm/language/openpulse.html. Jack will check out with TSC if its possible to get a copy of openpulse grammar. May have to invent our own defcal grammar." }, { "title": "Progress report - October 7: Checkpoint #1", "url": "/posts/submit1/", "categories": "Updates, Checkpoint", "tags": "updates, checkpoint", "date": "2021-10-07 16:41:55 +0100", "snippet": "Checkpoint Presentation for October 07 Checkpoint #1" }, { "title": "TODO List [code]", "url": "/posts/todo/", "categories": "Updates, todo", "tags": "updates, progress, todo", "date": "2021-10-03 16:41:55 +0100", "snippet": "Changes TODO in the codeRemove get_register (PARTIALLY DONE) Potential changes: Generate new instance of ClassicalRegister in the _process_QuantumMeasurementAssignment Perform circuit.add_register() Perform cl_identifier.set_register() Will make the syntax for measurement operation easier and constant with the other things that use context.lookup() instead. Problems: Need some way to not process IndexIdentifier, and perform indexing/selection/slicing on the ClassicalRegister instead. Conflict with language specification as it gives a way to add register to types other than BitArrayType as well. BranchingStatement Determine if the condition is a measurement result that is stored in a ClassicalRegister object using: if &amp;lt;ClassicalType&amp;gt;.register is None:... If register is None, then go for _process_Statement Else use c_if with the quantum gates inside the if-else block.ForInLoop Determine is loop is constant time unrollable or not. Have to look-ahead in the AST for evaluating unrollability. Probably a recursive backtracking style look-ahead would be easier to implement as per the current translator code. Unrollable: Only consisting of quantum gates. Just unroll the loop into a serial set of quantum gates. Non-unrollable: Consisting of quantum gates, measurements, classical operations, classical feedback, quantum-classical loop dependencies etc. Generate a separate quantum circuit for the loop block and then use qc.compose() to join initial circuit with circuit for each iter. Problem: The number of circuits will grow exponentially for nested loops. All attrs Accept a list of QuantumCircuit objects. First instance: main circuit. Subsequenct instances: circuit for each iteration. translate() Return a list of QuantumCircuit objects." }, { "title": "Changelog as of October 2, 2021", "url": "/posts/changelog2/", "categories": "Updates, Changelogs", "tags": "updates, progress", "date": "2021-10-02 16:41:55 +0100", "snippet": "Release Highlights Improved setup.cfg packaging Added todo.md at source/openqasm/src/openqasm/translator/tests/todo.md to keep track of required changes in translator Updated Makefiles for easy installation and building grammar Changes in ast.py - LiChen Notable Changes: Fixed NoDesignatorType parsing ub qasn_parser.py Added include statement type in ast.py Consistent use of Identifier and str. Refined QuantumGateDefinition, QuantumWhileLoop, Expression, Identifier, Qubit, FunctionCall, QuantumGate, QuantumMeasurementAssignment, BitType, ComplexType, CalibrationDefinition, SubroutineDefinition, BranchingStatement, BinaryExpression in ast.py Simplified version parsing and formatting Updated test.qasm with basic tests Added support for Identifier and IndexIdentifier subscriptsUpdate notes source/openqasm/src/openqasm/translator/context.py - Added modify_symbol to modify given symbol to the context with the provided value Updated assign_value_symbol to accommodate float, bool and ClassicalType source/openqasm/src/openqasm/translator/translator.py - Updated type imports source/openqasm/src/openqasm/translator/test.py - Updated type testing. Added testing for return types Functions now use cast instead of coerce source/openqasm/src/openqasm/translator/identifiers.py - Added get_register source/openqasm/src/openqasm/translator/expressions.py - Updated import statements Updated _ComputeAssignmentExpressionNamespace _FUNCTIONS dict source/openqasm/src/openqasm/translator/exceptions.py - Removed ClassicalTypeOverflow source/openqasm/src/openqasm/translator/types.py - Fixed typing issue for AngleType, UnsignedIntegerType and BitArrayType Update get_typecast and get_typevar to get mapping and instance creation from AST to translator types Fixed get_typecast now checks for variable type before returning a value. source/openqasm/src/openqasm/build_ast.py - Added testing rountine for adder.qasm. Checks statement type translation, version detection, Listing of for loops Operation support Type \\ Operator = &amp;amp; or ^ « » ~ popcount rotl rotr &amp;gt; &amp;gt;= &amp;lt; &amp;lt;= == != &amp;amp;&amp;amp; oror ! + - * / % ** BitArray o o o o o o o o o o ? ? ? ? ? ?                   SignedInteger o                   o o o o o o       o o o o o o UnsignedInteger o                   o o o o o o       o o o o o o Float o                   o o o o o o       o o o o o o Angle o                   o o o o o o       o o o o o o bool o                               o o o             complex[x] o                                     o o o o   ? Type cast support From \\ To bit BitArray SignedInteger UnsignedInteger Float Angle bool complex[x] bit o o o o     o   BitArray   o o o   ? ?   SignedInteger   o o+ o+         UnsignedInteger   o o+ o+         Float     ? ? o o+     Angle   ?       o     bool o ?         o   complex[x]     ? ? ? ?   o o+ means that the casts are allowed even between types that do not have the same sizes.Angles (and integers and floats) cannot be measuredThe following codeangle[20] c;qubit q;measure q -&amp;gt; c[0];is ill-formed according to https://qiskit.github.io/openqasm/language/insts.html The statementbit|bit[] = measure qubit|qreg; measures the qubit(s) in the Z-basis and assigns the measurement outcome(s) to the target bit(s). For backwards compatibility this is equivalent to measure qubit|qubit[] -&amp;gt; bit|bit[]; which is also supported. Measurement corresponds to a projection onto one of the eigenstates of , and qubit(s) are immediately available for further quantum computation. Both arguments must be register-type, or both must be bit-type. If both arguments are register-type and have the same size, the statement b = measure a; broadcasts to b[j] = measure a[j]; for each index j into register a." }, { "title": "Changelog as of September 28, 2021", "url": "/posts/changelog1/", "categories": "Updates, Changelogs", "tags": "updates, progress", "date": "2021-09-28 16:41:55 +0100", "snippet": "Release Highlights Added support for ForInLoop, branching, QuantumMeasurementAssignment, ClassicalAssignment, QuantumBarrier Added initial support for types with working implementations for UnsignedInteger, BitArrayType, AngleType and SignedIntegerType Initial testing routing with support for types UnsignedIntegerType, BitArrayType, SignedIntegerType, AngleType, ClassicalType Updated: File parsing and argument parsing for build_ast.pyUpdate notes Added Initial implementation for types.py Update log source/openqasm/src/openqasm/translator/context.py - Span now optional Context can now use the AssignmentOperator to assign value to previously declared symbol Added support to store types source/openqasm/src/openqasm/translator/translator.py - Updated quantum_gate definition Updated PhaseGate definition Added ForInLoop support. Added_get_range method with exception handling for wrong RangeDefinition Added support for branching from context Added_process_QuantumMeasurementAssignment for processing quantum measurement assignment as per AST Improved file parsing routine Added support to process ClassicalAssignment and QuantumBarrier Quantum gate definitions now support names. include_dirs, program_ast and includes_asts attributes now private source/openqasm/src/openqasm/translator/test.py - Added basic testing functionality for types UnsignedIntegerType, BitArrayType, SignedIntegerType, AngleType, ClassicalType using pytest source/openqasm/src/openqasm/translator/identifiers.py - Updated get_identifier return type. All identifier types now have a common interface. source/openqasm/src/openqasm/translator/expressions.py -  Expression evaluation now has its own function dict instead of eval calls Added constants : Tau, euler Added support for AssignmentOperator source/openqasm/src/openqasm/translator/exceptions.py -  Added WrongRange exception when mandatory range values are missing Added InvalidIncludePath exception when file specified is not present in any of the include paths. Also provides info on include paths if applicable. Added ClassicalOverFlow exception when there is an integer overflow Added InvalidOperation exception when given operator is not implemented for a given type with support for SignedIntegertypes Added InvalidTypeAssignment when wrong types of operands are evaluated source/openqasm/src/openqasm/translator/types.py - Initial implementation for types.py Added “working” implementation of UnsignedInteger and BitArrayType Added “working” support for SignedIntegerType Added BitArray and Angle support source/openqasm/src/openqasm/build_ast.py -  Update file parsing and input argument specification Added –help args and –translate flag Now uses stdlib argparse to parse cli arguments Merged aspcompiler:master into refimpl- Notable changes: index set can now be specified by a signed or unsigned integer " }, { "title": "Progress as of September 24, 2021", "url": "/posts/progress-report/", "categories": "Progress, September 24, 2021", "tags": "progress, progress_report", "date": "2021-09-24 12:11:55 +0100", "snippet": "Progress report and discussion summary for OpenQASM 3.0 Reference Implementaion #23 as discussed on September 24, 2021Plan as of 2021-09-24 Continue to integrate AST work with code generation. Before 0ct 7 QAMP mentorship checkpoint: Blog Slides October 17 Vishal to present progress at IEEE Quantum Week 2021Progress so far Abeer’s QOSF QuantumCircuit Generator: https://github.com/mentor-fall2021-openqasm/QASM_to_QuantumCircuit_Gen Adrien’s update build_ast.py to make life easier Website initial buildJack’s Meeting Notes Classic feedback undoable with normal Qiskit access and also with Qiskit Runtime. Measurement needs special types that we need to subclass from Python types. Parsing is essentially complete, but Adrien will want to verify the AWS team’s implementation of recommended changes. In AST we don’t have an information on included files. Thus, error lines from includes don’t match. Adrien &amp;amp; Abeer are converging their work. Both are working on translator. Vishal working on blogging for Organization. Team will provide content when blog fully available. Vishal presenting IEEE Quantum Week. Slides for that may be used for Oct. 7 QAMP checkpoint. Any shortfalls in the reference AST from the AWS team should continue to be noted or PR’ed, whatever appropriate. Implementation of gate definitions with names.Notes from Conversation with Dr. BelloWe had a problem with implementing unfolding loops of the form:OPENQASM 3;include &quot;stdgates.inc&quot;;const n = 10;qubit q;angle[n] c = 0;for i in [0: n - 1] { phase(c) q[0]; measure q -&amp;gt; c[i]; c &amp;lt;&amp;lt;= 1;}Abeer Vaishnav met with Dr. Bello by WebEx. The summary: Qiskit does not support shift instructions. They are trivial to add, kind like an opaque inst. But those things that consume qiskit objects do not know about it. Getting a random QASM file and trying to express that in Qiskit is hard. Probably better to get an algorithm in Qiskit, write the QASM for it, and use that last QASM as the example. Unfolding loops is not always possible." }, { "title": "Changelog as of September 21, 2021", "url": "/posts/changelog/", "categories": "Updates, Changelogs", "tags": "updates, initial", "date": "2021-09-22 16:41:55 +0100", "snippet": "Release Highlights First update changelog! Added MakeFiles and updated setup.cfgs to easily compile and build grammer from qasm3.g4 Initial translator package with limited functionality. Currently supported definitions from ast: BranchingStatement, ClassicalAssignment, ClassicalDeclaration, ConstantDeclaration, ForInLoop, QuantumBarrier, QuantumGate, QuantumGateDefinition, QuantumMeasurementAssignment, QuantumPhase, QuantumReset, QubitDeclaration, Statement, Concatenation, Identifier, IndexIdentifier, RangeDefinition, Selection, Slice, Subscript, BinaryExpression, BooleanLiteral, Constant, DurationLiteral, Expression, FunctionCall, Identifier, IndexExpression, IntegerLiteral, RealLiteral, StringLiteral, UnaryExpression, Span.Update notes Added MakeFile’s to source/openqasm and source/grammer to compile and build grammer from qasm3.g4 Updated setup.cfgs with pylint and black support Update log source/openqasm/tests/build_ast.py - Test parser for validating statement numbers, OpenQASM version and ForLoop Listing for example adder.qasm in openqasm/examples source/openqasm/src/openqasm/translator/context.py - Stores a parseable context in a dict-like structure. _OpenQASMIdentifier: Class to store necessary information about location of identifiers defined by type Span from ast w.r.t source. Keeps track of start and end of line following antlr convention. class OpenQASMContext: Stores the necessary content to parse the OpenQASM 3.0 file add_symbol = Adds an initialized symbol. Stores in _symbols dict lookup = searches value in context dict _symbols declare_symbol = Adds uninitialized symbol with None value to context dict _symbols source/openqasm/src/openqasm/translator/exceptions.py - Handles exceptions for the whole translator package. Also holds location info for each error occurred w.r.t source.Methods: UnsupportedFeature = raises error and displays unsupported feature_name with a reason UnsupportedExpressionType = raises an invalid expression_type_name error. UndefinedSymbol = raises undeclared identifier error UnkownConstant = raises undeclared constant identifier error UninitializedSymbol = raises error for an uninitialized identifier which requires an initialization MissingExpression = Raises error for a wrongly structured expression or missing expression source/openqasm/src/openqasm/translator/expressions.py - Computes Expression according to type. Main class = _ComputeExpressionNamespaceMethods: compute_BinaryExpression = Computes lhs and rhs w.r.t context grammar. Returns evaluated expression using default eval func compute_UnaryExpression = Computes value of Unary expression with the operator w.r.t context grammar. Returns evaluated expression using default eval func compute_Constant = Checks for constant values in supported list and returns the constant value corresponding to _CONSTANT_VALUES dict compute_Identifier = Returns Identifier corresponding to the context stored in _symbol dict in context.py compute_IntegerLiteral = Returns Integer Literal corresponding to the context stored in _symbol dict in context.py compute_RealLiteral = Returns Real Literal corresponding to the context stored in _symbol dict in context.py compute_BooleanLiteral = Returns Boolean literal corresponding to the context stored in _symbol dict in context.py compute_StringLiteral = Returns Boolean literal corresponding to the context stored in _symbol dict in context.py compute_DurationLiteral = Currently unsupported. Throws a UnsupportedExpressionType error. compute_FunctionCall = Compute_expression for each of the passed list of arguments w.r.t context grammar and returns values of function name corresponding to the context stored in _symbol dict in context.py compute_IndexExpression = Compute_expression for index value w.r.t context grammar and returns compute_expression for the expression part for the particular index passed. compute_Expression = Computes generic expression; Stores method_name as a formatted string with prefix compute_(input_expression_type) and returns attribute of the method w.r.t. Context grammar passing the relevant expression and context. Throws UnsupportedExpressionType exception if expression not currently supported by context. source/openqasm/src/openqasm/translator/identifiers.py - Defines identifiers and processes the relevant type of identifier as per definition in ast.Methods: get_identifier = takes in either an Identifier or IndexIdentifier from ast and returns attributes after passing it to the relevant method_name in the _IdentifierRetrieverNamespace get_Subscript = computes the index and returns lookup value in context _symbols dict for that index. get_Selection = computes list of input indexes and returns list of lookup symbols w.r.t context get_Slice = computes the input range and returns list of range of objects returned after evaluating, start, end and step points from context definition get_Concatenation = computes concatenated list of passed arrays w.r.t context. Checks if the returned identifier lookup is a list and casts it to a list if needed. source/openqasm/src/openqasm/translator/modifiers.py - Defines apply_modifier to apply appropriate modifier to quantum gate. Supports inv, pow and ctrl. .negctrl type also supported as of [2c5bc5]. Also compute_expression for number of ctrl and power as per context. source/openqasm/src/openqasm/translator/translator.py - Translator to convert OpenQASM 3.0 into a qiskit QuantumCircuit instanceMethods: translate = Translates given ast to a qiskit QuantumCircuit instance. Declares a QuantumCircuit and context object and passes on each ast statement to _process_Statement for further breaking it down and retrieves the resulting processed qiskit QuantumCircuit object and returns the same. _process_statement = Extracts each statement type, name and formats function name as per its relevant function name to be passed on to for relevant processing. The relevant processing_function_name is passed on with statement, circuit and context as arguments. Also checks if the function name is a supported feature and returns an UnsupportedFeature exception _supported_features = Returns list of supported AST type names _process_QubitDeclaration = Process QubitDeclaration node in AST. Sets default size to 1 otherwise compute_expression as per context for quantum_register_size. Declares the register and adds it to the circuit as well as adds qubit.name and register to _symbol dict in context. _process_ConstantDeclaration = Process ConstantDeclaration node in AST. Checks current statement node and either declares it as None if uninitialised or adds it to _symbol dict in context _process_ClassicalDeclaration = Processes ClassicalDeclaration node in AST if supported. Initializes expression to none or adds it to _symbol dict. _process_QuantumReset = Processes QuantumReset node and applies reset operation to the given qubit in context _process_QuantumGate = Processes QuantumGate node in AST. Appends relevant gate operation to the qubit in context. Applies the relevant gate modifier from modifiers.py if applicable _process_QuantumGateDefinition = Processes custom parameterized gates as specified in QuantumGateDefinition from ast. Returns an equivalent custom gate to the input definition. _process_QuantumPhase = Processes a custom phase input to a gate upto a global phase. Appends the equivalent phased_gate to the circuit object declared in translate method " }, { "title": "Project __init__( jack,abeer,adrien,vishal ) ", "url": "/posts/project-init/", "categories": "Progress, September 17, 2021", "tags": "progress, progress_report", "date": "2021-09-17 16:41:55 +0100", "snippet": "This post marks the official beginning of the project “OpenQASM 3.0 Reference Implementaion” as a part of Qiskit Advocate Mentorship Progmram #23 “QAMP” Fall 2021Plan as of 2021-09-17 Formulate Issues for astcompiler/openqasm a. note on Issues that we will submit PR Work on AST Work on Code Compiler a. This helps validate AST Document a. README.md b. website? c. Be ready to present to Mentorship program (9/21) Team to coordinate roles a. QC gen - Abeer &amp;amp; Adrien b. Coord with @aspcompiler on AST compiler - Adrien &amp;amp; Abeer c. Documentation - Vishal a. README.md b. Presentations d. Mentees schedule midweek meetings Progress so far Vishal will be preparing Slides for the Mentorship presentation Project : intent OpenQASM3 -&amp;gt; AST -&amp;gt; QC … maybe as far as Pulse support? Use of Li Chen’s AST generator (https://github.com/astcompiler/openqasm) Our progress so far a. AST test code (Adrien’s tests) b. Abeer’s code generator that support inv, etc. c. Anything else we have by presentation time " } ]
